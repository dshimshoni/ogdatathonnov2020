# -*- coding: utf-8 -*-
"""OG Datathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H5ss8P9QniSgG3aY0GlBMjCazKJqGFb7
"""

import pandas as pd
import requests
import json

pub_78_txt = 'data-download-pub78.txt'

headers = ['ein', 'name', 'city', 'state','country','organization type']
pub_78 = pd.read_csv(pub_78_txt, sep = '|', names = headers)
pub_78.head(10)

#Function to count the number of digits in  EIN
def num_digits(number):
  count = 0
  while (number > 0):
    number = number//10
    count = count + 1
    return count


#Function to convert the EIN into string format
def ein_string(ein):
  if num_digits(ein) == 9:
    ein = str(ein)
    return '{}-{}'.format(ein[:2],ein[2:])
  else: 
    ein = f'{ein:09}'
    return '{}-{}'.format(ein[:2],ein[2:])


#Function to generate url link to the Guidestar profile  
def guidestar_url(strein):
  url = 'https://www.guidestar.org/profile/'
  return url+strein

#Adding all the created columns
pub_78['strein'] = pub_78['ein'].apply(ein_string)
pub_78['guidestar_url'] = pub_78['strein'].apply(guidestar_url)
pub_78.sample(10)

# Filter out foreign non-profit entities 
pub_78 = pub_78.loc[~(pub_78['organization type'].isin\
                      (['FORGN','UNKWN','FORGN,PF', 'FORGN,SOUNK','EO,FORGN','FORGN,POF','FORGN,SO','EO,FORGN,LODGE','EO,FORGN,GROUP,LODGE' ]))]
pub_78.info()

# Created a 10,000 smaple weighted by each category
sample_eid = pub_78.groupby('organization type').apply(lambda x: x.sample(round(10000 * len(x)/len(pub_78))))
sample_eid

# Making API calls to Propublica to get asset, income, and revenue information
asset_amount = []
income_amount = [] 
revenue_amount = []
url = 'https://projects.propublica.org/nonprofits/api/v2/organizations/'
ein = sample_eid['ein'].tolist()
for i in ein: 
  ein_parameter = str(i) + '.json'
  response = requests.get(url + ein_parameter)
  if response.status_code == 200:
    result = response.json()
    try:
      asset_amount.append(result['organization']['asset_amount'])
      income_amount.append(result['organization']['income_amount'])
      revenue_amount.append(result['organization']['revenue_amount'])
    except json.decoder.JSONDecodeError:
      pass
  else:
    asset_amount.append(0)
    income_amount.append(0)
    revenue_amount.append(0)

#
pub_78['asset_amount'] = asset_amount
pub_78['income_amount'] = income_amount
pub_78['revenue_amount'] = revenue_amount



